. todo
 . devices
  . puissance des sharps
   . actuellement 10000, eq. a infini

  . container: a bot can contain some pawn
   . the clamp moves the pawn in a container of size 1 per default

  . implement switches at each corners
   . implement as sharp with a very small distance ?
   . should have an aperture in that case...
   . more simple to implement it by walking object list

  . add red blue under the robot so that the robot can continue playing even if the asserv gets lost
   . create the redblue.cc
   . implement the corresponding strategy

  . rename sensor.cc to sharp.cc

 . strategy
  . distribution area
   . allows for debugging

 . documentation guide
  . specifier les reperes
   . tous les reperes (local du robot...)
   . 0 degree points on the right
   . 90 degree points on the bottom 
   . (0, 0) top left corner

 . optimisation, code
  . should the global update routine be called at the
    end of cpSpaceStep instead of velocity update?
  . cpShape->sensor can be used to implement a sensor more efficiently
  . factorize tile code in tile.{hh,cc}
  . cache a surface for bot, update only when angle changes
   . in asserv.next(), set body->flags | NEED_GRAPHICS_UPDATE;
   . in draw_shape, recompute the surface

. features
 . state snapshot
  . snap::load, snap::store
 . implement friction ?
  . -> at least the robot should not bounce indefinitly like a ball...
  . angular velocity should be a function of velocity and wheels circumference

. references
 . line intersection
  . http://alienryderflex.com/intersect/