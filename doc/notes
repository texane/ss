. todo
 . distribution area
  . allows for debugging

 . then util::tile

 . add red blue under the robot so that the robot can continue playing even if the asserv gets lost
  . create the redblue.cc
  . implement the corresponding strategy
 . rename sensor.cc to sharp.cc

 . documentation guide

 . devices
  . container: a bot can contain some pawn
   . the clamp moves the pawn in a container of size 1 per default

 . should the global update routine be called at the
   end of cpSpaceStep instead of velocity update?

 . puissance des sharps
  . actuellement 10000, eq. a infini

 . optimisation
  . cpShape->sensor can be used to implement a sensor more efficiently

 . specifier les reperes
  . 0 degree points on the right
  . 90 degree points on the bottom 
  . (0, 0) top left corner

 . implement friction ?
  . -> at least the robot should not bounce indefinitly like a ball...

 . cache a surface for bot, update only when angle changes
  . in asserv.next(), set body->flags | NEED_GRAPHICS_UPDATE;
  . in draw_shape, recompute the surface

 . angular velocity should be a function of velocity and wheels circumference

 . create graphics.cc, graphics.hh

. wanted features
 . state snapshot
  . snap::load, snap::store

. line intersection
 . http://alienryderflex.com/intersect/